# -*- coding: utf-8 -*-
"""Copy of notebook1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Gkfi0sUYuQyw-J2u3HVcBZvAHuCFWG1N

# Introduction

This is a colab notebook. It is a special case of a ipython notebook in a specific interface. This is how you will do your analysis for this class. It requires a google account and is an example of an ipython notebook interface. 

This is an example of a text block. To add text blocks, simply click the "+ Text" button on the bar above the notebook. 

The code is marked up in a markup language called "Markdown". You can find a guide to markdown syntax here: [https://www.markdownguide.org/cheat-sheet/](https://www.markdownguide.org/cheat-sheet/).

Also, the [colab documentation](https://colab.research.google.com/notebooks/markdown_guide.ipynb) is useful.

Markdown should take you only a few moments to learn. It is as easy as a markup langauge can be made.

# Imports and files
The first thing we'll try is loading some data and plotting it. To do this, we'll need some packages. Let's load up pandas, a package for data management, and matplotlib. The python command for this is `import`.
"""

import pandas as pd
import numpy as np

"""If you want to mount your google drive, do this. 

```
from google.colab import drive
drive.mount('/content/drive/')
```

Or, there's a little button on the left menu. (If you don't see it, click on the little arrow on the left hand side of the screen.)

We won't do this here, since we'll download our data from github.

To execute unix commands, do `!command`. For example, here I'm listing out the contents of the connected runtime for this notebook. For example, here I'm running the `ls` command for listing out the contents of a unix directory.
"""

!ls

"""Let's download the data. Or you could upload the data to google drive or directly upload to colab."""

! if [ ! -e kirby127a_3_1_ax_283Labels_M2_corrected_stats.csv ] ; \
  then wget https://raw.githubusercontent.com/bcaffo/ds4bme_intro/master/data/kirby127a_3_1_ax_283Labels_M2_corrected_stats.csv; \
fi

"""The initial `!` says it's a unix command. The `if` statement asks whether the file already exists via `-e`. The `!` inside the brackets takes the opposite. So 

```
if [ ! -e kirby127a_3_1_ax_283Labels_M2_corrected_stats.csv ] ;
```
test whether that file *does not* exist in the current working directory. If it does not, then it executes the following command:
```
wget https://raw.githubusercontent.com/bcaffo/ds4bme_intro/master/data/kirby127a_3_1_ax_283Labels_M2_corrected_stats.csv;
```
which grabs the file from my github repository over `https`. Then the `fi` statement ends the conditional statement. The `\` are required since colab notebook snippets don't work like a regular unix command line or shell script and the `\` tells colab to keep going on like this is the same line. If you were writing this in a shell script file, that would be unnecessary.

# Reading data in with pandas

Let's now read in an MRICloud dataset using pandas. We want to use the function `read_csv` within pandas. Notice we imported pandas `as pd` so the command is `pd.read_csv`.
"""

df = pd.read_csv("/content/kirby127a_3_1_ax_283Labels_M2_corrected_stats.csv")

"""Let's look at the first 4 rows of our dataframe. The object `dataset` is a `pandas` object with associated methods. One is `head` which allows one to see the first few rows of data."""

df.head(4)

"""# Working with the data

Let's get rid of the column `rawid` and the unnamed column since they're kind of useless for today's lecture. Also let's work with only the volume.
"""

df = df.drop(['Unnamed: 0', 'rawid', 'min', 'max', 'mean', 'std'],\
             axis = 1)

"""Now let's create a column called `icv` for intra-cranial volume. ICV is defined as the summ of the Type I Level 1 structures and cerebrospinal fluid. For the rest of this lecture, we're just going to look at this type and level."""

## Extract the Type 1 Level 1 data
t1l1 = df.loc[(df.type == 1) & (df.level == 1)]
## Create a new column based on ICV
t1l1 = t1l1.assign(icv = sum(t1l1.volume))
t1l1

"""Now the TBV is defined as the sum of the volume for all rows except CSF."""

t1l1 = t1l1.assign(tbv = sum(t1l1.volume[(t1l1.roi != 'CSF')]))
t1l1

"""Let's look at brain composition."""

t1l1 = t1l1.assign(comp = lambda x: x.volume / x.tbv)
t1l1

"""# Plotting

Pandas has built in methods for plotting. Later on, we'll try different plotting packages.
"""

t1l1.plot.bar(x='roi',y='comp')

!pip install plotly==4.0.0

"""We can create an interactive plot with `plotly`. This is a professionally developed package that makes interactive plotting very easy. Also, it renders nicely within colab or jupyter notebooks. For plotly graphics, I would suggest assigning the graph to a variable then calling that variable to show the plot. This way you can modify the plot later if you'd like."""

import plotly.express as px
myplot = px.bar(t1l1, x='roi', y='volume')
myplot.show()
